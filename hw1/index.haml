!!! 5
%html
	%head
		%meta(charset='utf-8')
		%title='Three.js Homework1'
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js')
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r70/three.min.js')
		%script(src='../src/OrbitControls.js')
		:css
			#info {
				position: absolute;
				top: 2%;
				width: 100%;
				padding: 10px;
				text-align: center;
				color: #ffff00
			}

			body {
				margin: 0;
				overflow: hidden;
			}
	%body
		#info
			%div='CG_HW1'
			%div
				%button(style='width: 20%;')='Toggle Turn'
				%select
					%option(value='analog')='Analog'
					%option(value='quartz')='Quartz'
					%option(value='sector')='Sector'
		:javascript
			var scene, renderer, camera;
			var controls;
			var angle = 0;

			var size = 80;
			var clock, pointer, hours, mode;
			var ticker = new THREE.Clock(false);

			init();
			animate();

			function init() {
				scene = new THREE.Scene();
				renderer = new THREE.WebGLRenderer();
				renderer.setSize(window.innerWidth, window.innerHeight);
				renderer.setClearColor(0x888888);
				document.body.appendChild(renderer.domElement);

				camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);
				camera.position.y = 500;
				controls = new THREE.OrbitControls(camera, renderer.domElement);

				clock = new THREE.Object3D();
				scene.add(clock);

				var clockOut = new THREE.Mesh(
				new THREE.CylinderGeometry(size * 1.3, size * 1.3, 9.7, 32), 
				new THREE.MeshBasicMaterial({ color: 'black' }));
				clock.add(clockOut);

				var clockIn = new THREE.Mesh(
				new THREE.CylinderGeometry(size * 1.1, size * 1.1, 9.8, 32), 
				new THREE.MeshBasicMaterial({ color: 'white' }));
				clock.add(clockIn);

				hours = new THREE.Object3D();
				scene.add(hours);

				for (var i = 0; i < 12; i++) {
					var hour = new THREE.Mesh(
						new THREE.BoxGeometry(10, 9.9, size * 0.4), 
						new THREE.MeshBasicMaterial({ color: 'black' }));
					var radian = hour.rotation.y = 2 * Math.PI / 12 * i;
					hour.position.set(
						Math.sin(radian) * size * 1.2,
						0,
						Math.cos(radian) * size * 1.2
					);
					hours.add(hour);
				}

				var gridXZ = new THREE.GridHelper(100, 10);
				gridXZ.setColors(new THREE.Color(0xff0000), new THREE.Color(0xffffff));
				scene.add(gridXZ);

				window.addEventListener('resize', onWindowResize, false);

				$('button').click(function () {
					if (ticker.running) {
						ticker.stop();	
					} else {
						ticker.start();	
					}
				});
				$('select').change(function () {
					if (pointer) {
						scene.remove(pointer);
						pointer = null;
					}
					window[this.value]();
					mode = this.value;
				}).change();
			}

			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize(window.innerWidth, window.innerHeight);
			}

			function animate() {
				controls.update();
				if (ticker.running)
					angle += 2 * Math.PI / 60 * ticker.getDelta();
				while (angle >= Math.PI * 2)
					angle -= Math.PI * 2;
				switch (mode) {
					case 'analog':
						if (pointer)
							pointer.rotation.y = angle;
						break;
					case 'quartz':
						if (pointer) {
							var sixtith = Math.floor(angle / (Math.PI * 2 / 60));
							pointer.rotation.y = sixtith * (Math.PI * 2 / 60);
						}
					break;
					case 'sector':
						if (pointer)
							scene.remove(pointer);
						pointer = new THREE.Mesh(
							new THREE.CylinderGeometry(size * 0.9, size * 0.9, 10, 32, 1, false, 0, angle), 
							new THREE.MeshBasicMaterial({ color: 'gray' }));
						pointer.rotation.z = Math.PI;
						pointer.rotation.y = Math.PI;
						scene.add(pointer);
						break;
				}

				requestAnimationFrame(animate);
				renderer.render(scene, camera);
			}

			function analog() {
				pointer = new THREE.Object3D();
				pointer.rotation.x = Math.PI;
				pointer.rotation.z = Math.PI;
				scene.add(pointer);
				var pointerIn = new THREE.Mesh(
					new THREE.BoxGeometry(10, 10, size * 0.9), 
					new THREE.MeshBasicMaterial({ color: 'black' }));
				pointerIn.position.set(0, 0, size / 2);
				pointer.add(pointerIn);
			}

			function quartz() {
				analog();
			}

			function sector() {
				// do nothing
			}