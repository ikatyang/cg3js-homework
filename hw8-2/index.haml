!!! 5
%html
	%head
		%meta(charset='utf-8')
		%title='Three.js Homework8-2'
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r76/three.js')
		%script(src='../src/OrbitControls.js')
		%script(src='../src/KeyboardState.js')
		%script(src='../src/PerlinNoise.js')
		:css
			h1 {
				position: absolute;
				top: 0;
				width: 100%;
				text-align: center;
				color: #ffff00;
			}
			body {
				margin: 0;
				overflow: hidden;
			}
	%body
		.top
			%h1='CG_HW8-2'
		:javascript
			var scene, camera, renderer;
			var controls;
			var water, waterSlices = 100, waterStacks = 100;
			var waterBufferA, waterBufferB, waterBuffer1, waterBuffer2;
			var waterStart = -200, waterLength = 400;
			var boat, boatWaves, boatAngle = 0;
			var keyboardState;
			var clock = new THREE.Clock();
			
			init();
			animate();

			function init() {
				scene = new THREE.Scene();
				
				camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 0.1, 10000);
				camera.position.set(0, 400, 400);
				camera.lookAt(new THREE.Vector3(0, 0, 0));
				
				renderer = new THREE.WebGLRenderer();
				renderer.setSize(window.innerWidth, window.innerHeight);
				renderer.setClearColor(0x888888);
				
				document.body.appendChild(renderer.domElement);
				controls = new THREE.OrbitControls(camera, renderer.domElement);
				
				window.addEventListener('resize', onWindowResize, false);
				window.addEventListener('mousemove', onDocumentMouseDown, false);
				
				noise.seed(Math.random());
				var ground = new THREE.Mesh(
					new THREE.ParametricGeometry(function(u, v) {
						var h = (noise.perlin2(u, v) + 1) / 2;
						return new THREE.Vector3(waterStart + waterLength * u, -200 * h, waterStart + waterLength * v);
					}, 100, 100),
					new THREE.MeshPhongMaterial({
						color: 0xff1234,
						side: THREE.DoubleSide,
					}));
				scene.add(ground);
				
				water = new THREE.Mesh(
					new THREE.ParametricGeometry(function(u, v) {
						return new THREE.Vector3(waterStart + waterLength * u, 0, waterStart + waterLength * v);
					}, waterSlices, waterStacks),
					new THREE.MeshPhongMaterial({
						color: 0x23f0ff,
						opacity: 0.25,
						transparent: true,
						side: THREE.DoubleSide,
					}));
				water.geometry.normalsNeedUpdate = true;
				water.geometry.verticesNeedUpdate = true;
				scene.add(water);
				
				waterBufferA = waterBuffer1 = new Array(waterStacks + 1);
				waterBufferB = waterBuffer2 = new Array(waterStacks + 1);
				for (var i = 0; i <= waterStacks; i++) {
					waterBuffer1[i] = new Array(waterSlices + 1);
					waterBuffer2[i] = new Array(waterSlices + 1);
					for (var j = 0; j <= waterSlices; j++)
						waterBuffer1[i][j] = waterBuffer2[i][j] = 0;
				}
				
				var pointLight = new THREE.PointLight(0xffffff);
				pointLight.position.set(0, 300, 0);
				scene.add(pointLight);
				
				raycaster = new THREE.Raycaster();
				
				var objectLoader = new THREE.ObjectLoader();
				objectLoader.load('../src/models/boat.json', function (object) {
					object.scale.set(20, 20, 20);
					object.position.y = 5;
					scene.add(object);
					boat = object;
					boatWaves = [
						new THREE.Vector3(0, 0, -120),
						new THREE.Vector3(10, 0, -90),
						new THREE.Vector3(-10, 0, -90)
					];
				});
				
				keyboardState = new KeyboardState();
			}
			
			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize(window.innerWidth, window.innerHeight);
			}
			
			function onDocumentMouseDown(event) {
				event.preventDefault();
				var mouse = new THREE.Vector2(
					(event.clientX / window.innerWidth) * 2 - 1,
					-(event.clientY / window.innerHeight) * 2 + 1);
				raycaster.setFromCamera(mouse, camera);

				var intersects = raycaster.intersectObject(water);
				if (intersects.length > 0) {
					var move = intersects[0].point;
					var i = Math.floor((move.z - waterStart) / waterLength * waterStacks);
					var j = Math.floor((move.x - waterStart) / waterLength * waterSlices);
					if (i > 0 && j > 0)
						waterBuffer2[i][j] = 2;
				}
			}

			function animate() {
				var delta = clock.getDelta();
				if (boat) {
					if (keyboardState.pressed('A'))
						boatAngle += 0.01;
					if (keyboardState.pressed('D'))
						boatAngle -= 0.01;
					var velocity = new THREE.Vector3(0, 0, -1).applyAxisAngle(new THREE.Vector3(0, 1, 0), boatAngle).multiplyScalar(50);
					if (keyboardState.pressed('W'))
						boat.position.add(velocity.clone().multiplyScalar(delta));
					boat.rotation.y = boatAngle;
					if (keyboardState.pressed('A') || keyboardState.pressed('D') || keyboardState.pressed('W'))
						for (var i = 0; i < boatWaves.length; i++) {
							var point = boat.position.clone().add(boatWaves[i].clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), boatAngle));
							var x = Math.floor((point.x - waterStart) / waterLength * waterSlices);
							var z = Math.floor((point.z - waterStart) / waterLength * waterStacks);
							if (x > 0 && x < waterSlices && z > 0 && z < waterStacks)
								waterBuffer2[z][x] = 2;
						}
				}
				if (waterBuffer1 === waterBufferA) {
					waterBuffer1 = waterBufferB;
					waterBuffer2 = waterBufferA;
				} else {
					waterBuffer1 = waterBufferA;
					waterBuffer2 = waterBufferB;
				}
				for (var i = 1; i <= waterStacks - 1; i++) {
					for (var j = 1; j <= waterSlices - 1; j++) {
						var velocity = -waterBuffer2[i][j];
						var smoothed = (waterBuffer1[i - 1][j] + waterBuffer1[i + 1][j] + waterBuffer1[i][j - 1] + waterBuffer1[i][j + 1]) / 4;
						var newHeight = (2 * smoothed + velocity) * 0.951;
						waterBuffer2[i][j] = newHeight;
					}
				}
				for (var i = 0; i <= waterStacks; i++)
					for (var j = 0; j <= waterSlices; j++)
						water.geometry.vertices[i * (waterStacks + 1) + j].y = 5 * waterBuffer2[i][j];
				water.geometry.computeFaceNormals();
				water.geometry.computeVertexNormals();
				controls.update();
				keyboardState.update();
				requestAnimationFrame(animate);
				renderer.render(scene, camera);
			}