!!! 5
%html
	%head
		%meta(charset='utf-8')
		%title='Three.js Homework5'
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.5.1/dat.gui.min.js')
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r70/three.min.js')
		%script(src='../src/OrbitControls.js')
		:css
			h1 {
				position: absolute;
				top: 0;
				width: 100%;
				text-align: center;
				color: #ffff00;
			}
			body {
				margin: 0;
				overflow: hidden;
			}
		%script#myVertexShader(type='x-shader/x-vertex')
			:plain
				uniform int shading;
				uniform int coordinate;
				varying vec4 color;
				varying vec3 pos;
				void perVertexShading() {
					if (coordinate == 0)
						pos = position;
					else if (coordinate == 1)
						pos = vec3(modelMatrix * vec4(position, 1.0));
					else if (coordinate == 2)
						pos = vec3(modelViewMatrix * vec4(position, 1.0));
					if (pos.x > 0.0)
						color = vec4(0, 0, 0, 1.0);
					else
						color = vec4(1, 1, 1, 1.0);
				}
				void perPixelShading() {
					if (coordinate == 0)
						pos = position;
					else if (coordinate == 1)
						pos = vec3(modelMatrix * vec4(position, 1.0));
					else if (coordinate == 2)
						pos = vec3(modelViewMatrix * vec4(position, 1.0));
				}
				void main() {
					gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
					if (shading == 0)
						perVertexShading();
					else
						perPixelShading();
				}
		%script#myFragmentShader(type='x-shader/x-fragment')
			:plain
				uniform int shading;
				uniform int coordinate;
				varying vec4 color;
				varying vec3 pos;
				void main() {
					if (shading == 0)
						gl_FragColor = color;
					else
						if (pos.x > 0.0)
							gl_FragColor = vec4(0, 0, 0, 1.0);
						else
							gl_FragColor = vec4(1, 1, 1, 1.0);
				}
	%body
		%h1='CG_HW5'
		:javascript
			var scene, renderer, camera;
			var controls;
			var teapot1, teapot2, angle = 0;
			var light;

			init();
			animate();

			function init() {
				var width = window.innerWidth;
				var height = window.innerHeight;

				renderer = new THREE.WebGLRenderer({ antialias: true });
				renderer.setSize(width, height);
				renderer.setClearColor(0x888888);
				document.body.appendChild(renderer.domElement);

				scene = new THREE.Scene();
				
				camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 10000);
				camera.position.set(0, 100, 200);
				camera.lookAt(new THREE.Vector3(0, 0, 0));

				controls = new THREE.OrbitControls(camera, renderer.domElement);
				
				var ground1 = new THREE.Mesh(
					new THREE.PlaneGeometry(100, 200),
					new THREE.MeshLambertMaterial());
				ground1.rotation.x = -Math.PI / 2;
				ground1.position.x = 50;
				scene.add(ground1);
				
				var ground2 = ground1.clone();
				ground2.material = new THREE.MeshPhongMaterial();
				ground2.position.x *= -1;
				scene.add(ground2);
  
				light = new THREE.SpotLight(0xffffff, 1.5);
				light.angle = Math.PI / 4;
				light.exponent = 10;
				scene.add(light);
				
				light.castShadow = true;
				light.shadowMapWidth = 1024;
				light.shadowMapHeight = 1024;
				light.shadowCameraNear = 10;
				light.shadowCameraFar = 4000;
				light.shadowCameraFov = light.angle / Math.PI * 180;
				
				ground1.receiveShadow = true;
				ground2.receiveShadow = true;
				
				renderer.shadowMapEnabled = true;
				renderer.shadowMapType = THREE.PCFShadowMap;

				var shaderMaterial = new THREE.ShaderMaterial({
					uniforms: {
						shading: {
							type: 'i',
							value: 0
						},
						coordinate: {
							type: 'i',
							value: 0
						},
					},
					vertexShader: document.getElementById('myVertexShader').textContent,
					fragmentShader: document.getElementById('myFragmentShader').textContent,
				});
				
				var jsonLoader = new THREE.JSONLoader();
				jsonLoader.load('../src/models/teapot.json', function(geometry, materials) {
					teapot1 = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial());
					teapot1.scale.set(10, 10, 10);
					teapot1.castShadow = true;
					teapot1.receiveShadow = true;
					scene.add(teapot1);

					teapot2 = teapot1.clone();
					teapot2.material = shaderMaterial;
					teapot2.position.set(70, 0, 0);
					scene.add(teapot2);
					
					light.target = teapot1;
				});
				
				var gui = new dat.GUI();
				gui.close();
				
				gui.add(shaderMaterial.uniforms.coordinate, 'value', {
					'object': 0,
					'world': 1,
					'eye': 2,
				}).name('Coordinate System');
				gui.add(shaderMaterial.uniforms.shading, 'value', {
					'per-vertex': 0,
					'per-pixel': 1,
				}).name('Shading Computation');
				
				window.addEventListener('resize', onWindowResize, false);
			}
			
			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize(window.innerWidth, window.innerHeight);
			}

			function animate() {
				angle += 0.01;
				light.position.set(70 * Math.cos(angle + Math.PI), 200, 70 * Math.sin(angle + Math.PI));
				if (teapot2)
					teapot2.position.set(70 * Math.cos(angle), 0, 70 * Math.sin(angle));
				controls.update();
				requestAnimationFrame(animate);
				renderer.render(scene, camera);
			}